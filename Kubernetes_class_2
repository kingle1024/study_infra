도커 컨테이너는 분리와 조절, 결합성(Composability), 오케스트레이션과 스케일링을 쉽게 처리하는 기능을 제공한다.
-> O

도커 컨테이너는 앱을 서로 그리고 기반이 되는 시스템으로부터 계속 분리하는 기능을 제공하며
동시에 더 쉽게 분리된 특정 애플리케이션의 CPU와 GPU, 메모리, I/O, 네트워킹 등 시스템 리소스 사용 방식을 규정할 수 있다.
대부분의 비즈니스 애플리케이션은 웹 서버, 데이터베이스, 인-메모리 캐시 등 하나의 스택으로 구성되는 여러 별개의 구성요소로 구성되는데,
컨테이너는 이런 조각들을 쉽게 변경할 수 있는 부품으로 구성된 기능 유닛으로 결합하여 처리된다.

컨테이너 기술은 민첩성을 확보하는 핵심 가상화 기술이며, 컨테이너 기반의 가상화 환경을 운영 관리하는 핵심 기술이 바로 쿠버네티스(Kubernetes)이다.
-> O

쿠버네티스와 컨테이너 기술은 마이크로서비스아키텍처(MSA) 환경을 구현하기에 가장 적합한 기술로 취급되며,
비즈니스 민첩성이 점점 더 중요해지는 환경에서 컨테이너와 쿠버네티스는 하이브리드 클라우드, 나아가 멀티 클라우드 서비스를 모두 사용하길 원하는 기업들의 요구를 충족하는 대안으로 여겨진다.
쿠버네티스(K8s, Kubernetes)는 컨테이너화된 애플리케이션들을 디플로이 자동화, 자동 스케일링 등의 관리를 위한 솔루션이다.
여러 장치들에 있는 컨테이너들을 클러스터링하여 프라이빗 클라우드 환경을 제공해주는데, 다시 말하면 여러 도커엔진의 컨테이너들을 관리해주는 솔루션이다.

학습내용
- 컨테이너와 도커
- 쿠버네티스와 데브옵스 운영
- 마이크로서비스 아키텍쳐 설계

도커 컨테이너
- 도커는 BSD와 솔라리스(Solaris)와 같은 유닉스(Unix) 운영체제에서 수십년 간 사용되었던 개념이 현대적으로 재탄생된 최신 개념
- 각 애플리케이션과 종속물이 운영체제 리소스의 분리된 세그먼트를 사용하는 방식
- 컨테이너 런타임(container runtime)은 호스트 운영체제가 제공하는 저수준 컨테이너 서비스를 사용해 컨테이너를 셋업하거나 없앤다.

1. 도커 컨테이너, '분리'와 '조절' 기능 제공
- 도커 컨테이너는 앱을 서로, 그리고 기반이 되는 시스템으로부터 계속 분리
- 동시에 더 쉽게 분리된 특정 애플리케이션의 CPU와 GPU, 메모리, I/O, 네트워킹 등 시스템 리소스 사용 방식을 규정

2. 이식성을 제공하는 도커 컨테이너
- 도커 컨테이너는 컨테이너 런타임 환경을 지원하는 모든 장치에서 실행
- 애플리케이션을 호스트 운영체제와 연결할 필요가 없다.

3. 결합성(Composability)을 제공하는 도커 컨테이너
- 대부분의 비즈니스 애플리케이션은 웹 서버, 데이터베이스, 인-메모리 캐시 등 하나의 스택으로 구성되는 여러 별개의 구성 요소로 구성
- 컨테이너는 이런 조각들을 쉽게 변경할 수 있는 부품으로 구성된 기능 유닛으로 결합
- 애플리케이션 디자인의 마이크로서비스(Microservice) 모델 

4. 오케스트레이션과 스케일링이 쉬운 도커 컨테이너
- 컨테이너는 가볍고, 오버헤드가 거의 없다.
- 여러 시스템에서의 애플리케이션 스케일링, 수요 증가와 리소스 보존을 위한 서비스 증가 및 다운에도 컨테이너를 사용

5. 가상 머신이 아닌 도커 컨테이너
- 가상 머신은 운영체제에서 자신의 인스턴스에서 실행되기 때문에 고수준의 프로세스 분리 기능을 제공
- 컨테이너는 호스트 운영체제에서 통제된 영역을 사용
- 많은 애플리케이션이 (철저히 관리되는 방식으로) 동일한 운영체제 커널을 공유 

6. 변경이 불가능하고, 비저장성이 특징인 도커 컨테이너
- 컨테이너는 내용을 설명하는 이미지로부터 부팅 및 실행된다. 
이미지는 기본적으로 변경이 불가능하다. 일단 생성되면 바뀌지 않는다.

7. 마이크로서비스가 아닌 도커 컨테이너 
- 컨테이너를 사용하면 더 쉽게 마이크로서비스 애플리케이션을 구현할 수 있다(컨테이너 != 마이크로서비스)
- 하지만 특정 애플리케이션을 가져와 컨테이너에 연결하면 자동으로 마이크로서비스가 생성된다는 의미는 아니다.
- 애플리케이션을 마이크로서비스로 변환하는 프로세스의 일부로 컨테이너화 할 수 있지만, 이는 수 많은 방법 중 하나이다.

kubectl : 커맨드
kubelet : 에이전트
kubernets Pod : 꾸러미 
- Pod 안에 컨테이너가 있다.
- 쿠버네티스는 컨테이너를 관리하는 오케스트레이션이다.

쿠버네티스와 데브옵스 운영
- 컨테이너 기술은 민첩성을 확보하는 핵심 가상화 기술이며, '컨테이너 기반의 가상화 환경을 운영 관리하는 핵심 기술'이 바로 쿠버네티스(Kubernetes)이다.
- 컨테이너화된 애플리케이션을 자동으로 배포, 스케일링 및 관리해주는 오픈소스, 쿠버네티스
- 마이크로 서비스 아키텍처 발전
- 데브옵스 모델의 성숙화
- Docker 이외에도 rkt나 Hyper container 다양한 컨테이너 엔진들을 지원
- 하드웨어 자원을 컨테이너화 하여 isolation(격리)하는 기능이 가능
- 스토리지 자원의 활용 용이성
- 노드 확장 등을 유연하게 지원 
- 자원을 최대한 최적으로 사용하기 위해 적절한 위치에 배포가 가능 

컨테이너와 데브옵스
- 개발 환경을 컨테이너 기반 가상화 환경으로 구현하고 CI(Continuous Integration)/CD(COntinuous Development) 도구 및 개발 방법론을 결합함으로써
코딩, 빌드 및 테스트를 보다 쉽고 빠르게 수행하며 개발 환경 자동화와 손쉬운 운영 환경 배포의 기반을 마련 
- CI 기술은 개발 과정에서 빠른 소프트웨어 수정을 통해 품질 및 배포 속도를 향상시키며, 
CD 기술을 소프트웨어 업데이트를 업무 애플리케이션에 적용해 변경 사항을 보다 효율적으로 배포하도록 지원
- 컨테이너는 자동화 도구와 결합해 기업들의 개발 및 운영 과정의 민첩성을 향상 
- 컨테이너 기반 가상화 환경은 컨테이너의 자동화된 배치, 확장 및 운영을 지원하는 오픈소스 관리 플랫폼 쿠버네티스(Kubernetes)와 결합해 사용
- 데브옵스와 마이크로서비스를 구현하기 위해 필요한 다양한 애플리케이션과 분석 툴 

마이크로서비스 아키텍쳐 Components
- 관리 컨테이너 : 개별 서비스 인스턴스에는 작동 할 컨텍스트가 필요. 
  - 가상 컴퓨터, Docker 컨테이너 또는 조정 된 프로세스로 구현 된 관리 컨테이너는 이러한 기능을 제공, 
  - 인스턴스 관리 및 조정을 제공하고 필요에 따라 새 인스턴스를 회전하며 개별 인스턴스의 수명주기를 관리 
- 외부 게이트웨이 : MSA 구현은 비즈니스 응용 프로그램 및 응용 프로그램에서 사용할 수 있는 API 형태로 기능을 도출
  - 서비스 외부 게이트웨이는 이러한 서비스에 대한 액세스를 관리하고 트래픽 관리 및 보안 정책을 적용하여 마이크로 서비스 환경을 보호.
  - 외부 게이트웨이 기능은 종종 API 관리 제품을 사용하여 구현
- 서비스 메쉬 기능 : 서비스 메쉬는 서비스 간의 통신을 느슨하게 결합, 신뢰성 및 유연성을 유지하는 데 도움이 되는 기능으로 구성되며 
  - 서비스 분리, 버전관리 전략 지원 및 부하시 탄성 확장성 관리가 가능.
  - 서비스 라우팅, 로드밸런싱 서비스 발견, 구성 저장소, ID공급자 기능 
- 서비스 이미지 레지스트리 
  - 사용자 환경의 어딘가에는 빌드되고 테스트 된 서비스의 불변 이미지를 저장하는 레지스트리로 코드 저장소(동적으로 생성된 서비스의 경우),
  - Docker 이미지 레지스트리, 이진 아티팩트 저장소 또는 VM 이미지의 BLOB(Binary Large Object) 기반 저장소 등
- 메시지 지향 미들웨어
  - 가장 간단한 MSA 구현은 HTTP와 같은 동기식 프로토콜 또는 gRPC 또는 Thrift와 같은보다 효율적인 프로토콜을 사용하여 지속 가능하며
  - 이벤트 및 메시지 중심 패턴을 지원하기 위해 비동기 메시징 채널이 필요 
- 빌드 및 테스트 자동화
  - MSA의 개발 민첩성 이점은 개발 출력 품질을 극대화하고 전달을 간소화하기 위해 개발주기에서 높은 수준의 빌드 및 테스트 자동화가 필요
- 배포 자동화 
  - 개발 민첩성 이점을 완전히 실현하려면 배포를 자동화 해야함

- 가상화 컨테이너란?
  - 컨테이너는 애플리케이션과 애플리케이션을 구동하는 환경을 격리한 공간을 의미한다.
  - 대부분의 서버 장비들은 컴퓨팅 환경을 소프트웨어로 구현한 가상머신을 사용하고 있으며 이 서버들은 다수의 운영 체제를 동시에 실행하기 위해 하이퍼바이저가 필요하고, 
    그 상위계층에 Guest OS가 각각 설치된 가상머신들을 구동시킨다.
  - 반면에 컨테이너로 구성된 서버는 하이퍼바이저를 사용하지 않고 CPU, RAM, Disk, Network과 같은 운영체제의 자원을 필요한 만큼 격리하여 컨테이너에 할당한다.

- 정리
  - 도커 컨테이너는 각 애플리케이션과 종속물이 운영체제 리소스의 분리된 세그먼트를 사용하는 방식으로 앱을 서로 그리고 기반이 되는 시스템으로부터 계속 분리한다.
  - 컨테이너 기술은 민첩성을 확보하는 핵심 가상화 기술이며, 컨테이너 기반의 가상화 환경을 운영 관리하는 핵심 기술이 바로 쿠버네티스(Kubernetes) 이다.
  - 개발 환경을 컨테이너 기반 가상화 환경으로 구현하고 CI(Continuous Integration) / CD(Continuous Development) 도구 및 개발 방법론을 결합함으로써 코딩, 빌드 및 테스트를 보다 쉽고 빠르게 수행하며
    개발 환경 자동화와 손쉬운 운영 환경 배포의 기반을 마련해준다.
