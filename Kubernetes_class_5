쿠버네티스 볼륨은 디스크 서비스로 Pod 내 컨테이너들이 접근가능하다.
-> O, 데이터를 담는 디렉토리로 pod 내에서 구동되는 컨테이너들보다 오래 유지되며,
그 데이터는 컨테이너가 재시작되더라도 계속 보존되며, 로컬 디스크, configMap, secret, persistentVolumeClaim, emptyDir, hostPath 등이 있다.

쿠버네티스 서비스는 포트, 로드밸런서를 기술할 수 있다.
-> O, 가능하다.

쿠버네티스 운영
- 쿠버네티스 볼륨
  - 데이터를 담는 디렉토리
  - pod 내 컨테이너들이 접근 가능함
  - pod에 소속되는 동안 유지됨
  - pod 내에서 구동되는 컨테이너들보다 오래 유지되며, 그 데이터는 컨테이너가 재시작되더라도 계속 보존됨
- 쿠버네티스 볼륨 종류
  - 로컬 디스크, configMap, secret, persistentVolumeClaim, emptyDir, hostPath
  - NFS(Network File System), iSCSI, Fiber Channel과 같은 일반적인 외장 디스크 인터페이스
  - GlusterFS나 Ceph와 같은 오픈 소스 파일 시스템
  - AWS EBS, GCP Persistent 디스크와 같은 퍼블릭 클라우드에서 제공되는 디스크
  - VsphereVOlume과 같이 프라이비트 클라우드 솔루션에서 제공하는 디스크 볼륨
- 컨테이너갈 볼륨 공유
  - apiVersion: v1
  - kind: Pod
  - metadata:
    name: two-containers
  - spec:
    restartPolicy: Never
    containers: 
    - name : nginx-container // 컨테이너 이름을 볼 수 있다.
    image: nginx
    volumeMounts:
    - name : shared-data // 특정한 디스크를 디렉토리로 연결
    mountPath: /usr/share/nginx/html // 마운트 경로가 지정되어 있음 
    - name : debian-container
    image : debian
    volumeMounts: 
    -name : shared-data // 볼륨 공유를 위한 네이밍을 동일하게 하고 있음
    mountPath: /pod-data // 마운트 경로
    command: ["/bin/sh"]
    args: ["-c", "echo Hello from the debian container > /pod-data/index.html"] // 컨테이너에 필요한 내용을 넣고 있음 
    volumes:
    name : shared data // 공유 데이터로 통일하여 공유 
- 볼륨마운팅에 네이밍을 지정해서 하는 방식으로 하고 있음

볼륨, 디스크 서비스
- 컨테이너간 볼륨 타입
- Temp : emptyDir
- Local : hostPath
- Network : GlusterFS, gitRepo, NFS, iSCSI, gcePersistentDisk, AWS EBS, AzureDisk, Fiber Channel, Secret, VshareVolum

볼륨, 디스크 서비스
- emptyDir
  - emptyDir은 Pod가 생성될때 생성되고, Pod가 삭제될때 같이 삭제되는 임시볼륨으로 생성 당시에는 디스크에 아무 내용이 없기 때문에 emptyDir
  - 단 Pod 내의 컨테이너가 클래쉬되어 삭제되거나 재시작 되더라도 emptyDir의 생명주기는 컨테이너 단위가 아니라 Pod 단위이기 때문에 emptyDir은 삭제되지 않고 계속해서 사용이 가능 
  VolumeMounts:
    - name: shared-storage
    mountPath: /data/shared
    - name: nginx
    image: nginx
    volumeMounts:
    -name: shared-storage
    mountPath: /data/shared
    volumes:
    -name: shared-storage
    emptyDir: {} // 생성될때 비어서 생성된다.
- hostPath
  - hostPath는 노드의 로컬 디스크의 경로를 Pod에 마운트해서 사용
  - 같은 hostPath에 있는 볼륨은 여러 Pod 사이에서 공유되어 사용
  - Pod가 삭제 되더라도 hostPath에 있는 파일들은 삭제되지 않고 다른 Pod가 같은 hostPath를 마운트하게 되면, 남아 있는 파일을 액세스 가능 
  - 노드의 /tmp 디렉토리를 hostPath를 이용하여 /data/shared 디렉토리에 마운트
  volumeMounts:
  -name: tpath
  mountPath: /data/shared
  volumes:
  -name: tpath
  hostPath:
    path: /tmp // /data/shared와 연결 
    type: Directory 
- gitRepo
  - 생성시에 지정된 git 레파지토리의 특정 리비전의 내용을 clone을 이용해서 내려 받은후에 디스크 볼륨을 생성하는 방식
  - 물리적으로는 emptyDir이 생성되고, git 레파지토리 내용을 clone으로 다운
  readOnly: true
  ports:
  - containerPort: 80
  protocol: TCP
  volumes:
  - name: html
  gitRepo:
    repository: https://github....
    revision: master
    directory: .
- *PersistentVOlume(PV) and PersistentVolumeClaim(PVC)
  - 클러스터 내 스토리지 일부 조각을 나타내는 API 객체
  - 개별 Pod의 수명주기를 넘어 보존되는 범용, 플러그가능 자원으로서 가용함
  - 볼륨 자체를 의미하는 PV들은 스토리지를 사용할 때 그 제공방식의 세부사항들을 추상화하는 API를 제공함
  - 스토리지가 사전에 생성되는 시나리오(정적 프로비저닝)에서는 PV들이 직접 사용됨
  - 반면 온디멘드 스토리지를 필요로 하는 시나리오(똥적 프로비저닝)에서는 PV 대신 PVC가 사용됨
  - PV는 파드하고 별개로 관리되고 별도의 생명주기를 가지고 있으며,
  PVC는 사용자가 PV에 하는 요청이다.
쿠버네티스 서비스
- 쿠버네티스 서비스 개념
  - Pod 집합과 같은 애플리케이션에 접근하는 방법을 기술하는 API객체
  - 포트, 로드밸런서를 기술할 수 있다.
  - Pod들을 서로 연결한다.
  - 설정을 분리(decouple)한다.
  - Pod 접근 정책을 정의한다.
  - 마이크로서비스와 대응되는 개념
  - 액세스 포인트는 내부(internal)일수도 외부(external)일수도 있다.
- 서비스
  - 서비스는 지정된 IP로 생성이 가능하고, 여러 Pod를 묶어서 로드 밸런싱이 가능하며, 고유한 DNS 이름을 가질 수 있다.
  - 멀티 포트 지원, Pod 간에 랜덤으로 부하를 분산하는 로드 밸런싱 알고리즘 지원
  apiVersion: v1
  kind: Service
  metadata:
    name: hello-node-svc
  sepc:
    selector:
      app: hello-node
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    type: LoadBalancer
Health Check(모니터링의 핵심)
- 쿠버네티스는 각 컨테이너의 상태를 주기적으로 체크해서, 문제가 있는 컨테이너를 자동으로 재시작하거나 또는 문제가 있는 컨테이너(Pod를) 서비스에서 제외 가능한 기능
- Liveness probe : 컨테이너가 살아 있는지 아닌지를 체크하는 방법
- Readiness probe : 컨테이너가 서비스 가능한 상태인지를 체크하는 방법
- Probe types
  - Liveness probe와 readiness probe는 컨테이너가 정상적인지 아닌지를 체크하는 3가지 방법
  - Command probe: 컨테이너의 상태 체크를 쉘 명령을 수행으로 체크 
  - HTTP probe : HTTP GET을 이용하여, 컨테이너의 상태를 체크
  - TCP probe : 지정된 포트에 TCP 연결을 시도하여 상태를 체크 
