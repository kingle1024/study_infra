Q1. 쿠버네티스는 자체적으로 사용자 계정을 관리하고 이를 인증(Authenticate)하는 시스템이 없다.
-> O, 반드시 별도의 외부 계정 시스템을 사용해야 하며 계정 시스템 연동을 위해서 Oauth나 구글 계정(Google Account)이나 오픈스택의 키스톤(keystone)과 같은 계정 연동 방식을 지원한다.
Q2. 쿠버네티스는 클러스터 내부에 가상네트워크를 구성해서 사용하는데, 이때 kube-proxy 이외에 네트워킹 관련한 애드온을 사용한다.
-> AWS, 애저, 구글클라우드같은 클라우스 서비스에서 제공하는 쿠버네티스를 사용한다면 별도의 네트워킹 애드온을 사용하지 않아도 된다.
쿠버네티스를 직접 보유중인 서버들에 설치해서 구성을 하려고 하면 네트워킹 관련 애드온을 설치해서 사용해야 한다.
네트워킹 애드온의 종류는 10개가 넘을 정도로 다양하게 있다.
ACI, Calio, Canal, Cilium, ... 

쿠버네티스 보안
- 인증
  - 쿠버네티스는 계정 체계를 관리함에 있어서 사람이 사용하는 사용자 어카운트와 시스템이 사용하는 서비스 어카운트 두 가지 개념을 제공
  - 일반적인 사용자
    - 일반적인 사용자는 우리가 일반적으로 생각하는 사용자 아이디의 개념
    - 쿠버네티스는 자체적으로 사용자 계정을 관리하고 이를 인증(Authenticate)하는 시스템이 없음.
    - 반드시 별도의 외부 계정 시스템을 사용해야 하며 계정 시스템 연동을 위해서 OAuth나 구글 계정(Google Account)이나 오픈스택의 키스톤(keystone)과 같은 계쩡 연동 방식을 지원
  - 서비스 어카운트
    - 쿠버네티스가 직접 관리하는 사용자 계정
    - 클라이언트가 쿠버네티스 API를 호출하거나 콘솔이나 기타 클라이언트가 쿠버네티스 API를 접근하고자 할 때 이는 실제 사용자가 아니라 시스템 
- 인증 방법
  - Basic HTTP Auth
    - HTTP 요청에 사용자 아이디와 비밀번호를 실어 보내서 인증하는 방식
  - Access token via HTTP Header
    - 일반적인 REST API 인증에 많이 사용되는 방식
  - Client cert
    - 클라이언트의 식별을 인증서(Certification)을 이용해서 인증하는 방식
  - Custom made
- 권한 관리(Authorization)
  - 쿠버네티스의 권한 처리 체계는 기본적으로 역할기반의 권한 인가 체계
  - ABAC(Attribute-based access control)와 RBAC(Role-based access control) 2가지 방법 제공
  - ABAC
    - 단어의 의미 그대로 속성(Attribute) 기반의 권한 관리
    - 사용가능한 속성으로는 일반적으로 사용자(user), 그룹(group), 요청 경로(request path), 요청 동사(request verb) 등 외에도 네임스페이스, 사원 등으로 설정
  - RBAC
    - 역할(Role) 기반권한 관리
    - 사용자와 역할을 별개로 선언한 다음에 그 2가지를 엮어서(binding)해서 사용자에게 권한을 부여
    - 서버에 접근할 필요 없이 kubectl이나 api를 이용해서 관리하는 것이 가능 

네트워크 정책
- 네트워크 정책 개념
  - Pod 그룹에 대해, 서로간 또는 외부 네트워크 엔드포인트와의 통신여부를 결정하는 정책
  - 네트워크 정책으로 Pod간 통신, 네임스페이스간 통신, 포트 번호 지정 등을 서술적으로 설정할 수 있음
  - NetworkPolicy 리소스들은 Pod들을 선택하고 선택된 Pod들에 허용되는 트래픽을 특정하는 규칙을 정의하기 위해 레이블을 사용함
  - 네트워크 정책들은 네트워크 프로바이더가 제공하는 네트워크 플러그인을 통해 실현됨
- Ingress 트래픽 컨트롤 정의 (수신)
  - ipBlock: CIDR IP 대역으로, 특정 IP 대역에서만 트래픽이 들어오도록 지정
  - podSelector: label을 이용하여, 특정 label을 가지고 있는 Pod들에서 들어오는 트래픽만 수신 가능
  - namespaceSelector: 특정 namespace로 부터 들어오는 트래픽만 수신 가능
  - Protocol & Port: 받을 수 있는 프로토콜과 허용되는 포트를 정의
- Engress 트래픽 컨트롤 정의 (송신)
  - Engress 트래픽 컨트롤은 ipBlock과 Protocol & Port 두 가지만 지원
  - ipBlock: 트래픽이 나갈 수 있는 IP 대역을 정의
  - Protocol & Port: 트래픽을 내보낼 수 있는 프로토콜과 포트를 정의
- Using Cilium - Controlling Ingress/Egress from Namespaces
  - 네트워크 폴리시로 실리움(Cilium) 사용 
- 네트워킹 애드온
  - 쿠버네티스는 클러스터 내부에 가상네트워크를 구성해서 사용하는데, 
    이때 kube-proxy 이외에 네트워킹 관련한 애드온을 사용
  - AWS, 애저, 구글 클라우드와 같은 클라우드 서비스에서 제공하는 쿠버네티스를 사용한다면 별도의 네트워킹 애드온을 사용하지 않더라도 각 클라우드 벤더에서 구현되어있음.
  - 쿠버네티스를 직접 보유중인 서버들에 설치해서 구성을 하려고 하려면 네트워킹 관련 애드온을 설치해서 사용해야 함
  - 네트워킹 애드온의 종류는 ACI, Cilum, CNI-Genie ... 등이 있고 OCI의 CNI(Container Network, Interface)를 구현하고 있다면 다른 애드온들도 사용 가능
- 보안 컨텍스트 개념
  - 쿠버네티스의 Pod나 컨테이너에 대한 접근 제어 설정(Access Control Setting)이나 특수 권한(Privilege)를 설정하는 기능을 제공
  - Pod 또는 컨테이너의 권한부여, 환경설정 접근을 정의하는 securityContext 필드
  - Pod 또는 컨테이너 내의 securityContext 필드는 컨테이너 프로세스들이 사용하는 사용자(runAsUser)와 그룹(fsGroup), 가용량, 권한 설정, 보안 정책(SELinux/AppArmor/Seccomp)을 설정하기 위해 사용됨
  - 런타임 UID, GID를 포함함
- 보안 컨텍스트 스펙
  apiVersion: v1
  kind: Pod
  metadarta: 
    name: security-context-demo // context로 정의
  spec:
    securityContext: // 중요한 부분 
      runAsUser: 1000
      fsGroup: 2000
    volumes:
      -name: sec-ctx-vol
      emptyDir: {}
    containers:
      -name: sec-ctx-demo
      image: gcr.io/google-sample/node-hello:1.0
      volumeMounts:
      -name: sec-ctx-vol
      mountPath: /data/demo
      securityContext:
        allowPrivilegeEscalation: false

Pod Security Policy
- Pod Security Policy 개념
  - SecurityContext는 컨테이너나 Pod의 보안 기능을 정의
  - Pod Security Policy(이하 PSP)는 보안 기능에 대한 정책을 정의
  - Pod 생성, 업데이트에 관한 세밀한 권한인증 제공
  - Pod 스펙에 대한 보안적 측면을 통제하는 클러스터-수준 리소스
  - PodSecurityPolicy 객체는, 관련 필드들에 대한 기본값들을 포함하여,
  Pod가 시스템 내로 받아들여지기 위해 구동될 때의 조건들 집합을 정의함
  - Pod 보안정책 통제는 선택적인 입장 승인 컨트롤러로서 구현됨
- 스펙
  kind: PodsecurityPolicy
  metadata:
    name: example
  spec:
    privileged: false
    seLinux:
      rule: RunAsAny

Q. 네트워킹 애드온 Cilium에 대해 조사 
Cilium은 Docker 및 Kubernetes와 같은 리눅스 컨테이너 프레임 워크에 API 기반의 네트워
